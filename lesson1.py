# Щоб запустити файл, ми в терміналі прописуємо: python + назва файла, який запускаємо

# Python Основи

# Comments

# rjjrjrj - рядковий коментар
''' блочний коментар '''

# Вивід

# print("Hello world")

print(1,2,3,4, sep='') # числа будуть склеєні разом
print(1,2,3,4, sep='-') # числа будуть через дефіс
print(1, 2, 3, 4, sep='-', end='') # перенос на інший рядок
print(1, 2, 3, 4, sep='-', end = 'finish') # В кінці буде finish

# Змінні

# На відмінну від інших мов програмування, в python ми просто пишемо назву змінної

# цілочисельні
i = 5

# float - з плавачую точкою
f = 1.2

# boolean: True or False, пишемо з великої літери
b = True

# по аналогії з Js, він заміняє NaN, undefined, все, що пустота
n = None

# Текстові змінні з одинарними лапками
s = 'String'

# Текстові змінні з подвійними лапками
s2 = "String 2"

# В python змінні прийнято називати snake style. Тобто, якщо у змінні є 2 слова, типу some_variable,
# ми прописуємо через нижнє підкреслення без великих букв. Це стосується і функцій. Великими літерами
# ми прописуємо лише назви класів

# Type функція допомагає нам оприділити, якого типу у нас змінна

print(type(n))

# Для того щоб перевести одну змінну з одного типу в другий ми і використовуємо ці ж функції, тип якого нам
# показується в type

intt = int('2')
print(intt)

# Однак, ми получимо помилку, якщо той рядок, яку ми переводимо у число, не являється числом

int224 = int('erwwef')
print(int224)

# Ми можемо писати змінні із множинним присвоєнням
# Кожна з цих змінн буде рівна 10
a = b = c = 10
print(a,b,c)

# Математичні операції тут працюють легко
#
a = 1
b = 2
print(a + b)
print(a / b)
print(a - b)
print(a * b)

# В python нема такого, як у js, типу a++, b++
# Замість цього ми пишемо a+=1, b+=1

# На рахунок ділення: при діленні ми завжди получаємо float
print(5 / 5)
# Ми получимо 1.0

# Якщо ми хочемо получити int, ми можемо прописати:

print(5//5)

# В цьому випадку, воно не закругляється, а те, що буде після коми відкидається

# Для того щоб закруглити, ми використовуємо функцію round
print(round(5/5))

# Остача від ділення
print(5%2)
# остаток буде 1

# Піднесення до степеня. Python вміє працювати з великии цифрами
print(2525**2525)

# Введення інформації (prompt в js) Завжди повертає string
num = input('Введіть номер: ')
print(num)

# 4 примітивних метода. Щоб щось перевести в: цілочисельне число, в число з плаваючою точкою, в рядок і в булівський
int(), float(), str(), bool()

# Масиви у python називаються списками list
# Елементи дістаються просто: ми дістаємо перший елемент

l = [1, 2, 3, 4, 5, 6, 7]
print(l[0])

# Буде помилка, якщо такого елемента у списку не буде
print(l[25])

# Ми можемо діставати елемент з кінця. Зараз ми получимо 7
print(l[-1])

# Зараз ми получимо 6
print(l[-2])

# Переприсвоєння. Давайте 2 переприсвоємо в 22
l[1] = 22
print(l)

# Щоб видалити елемент треба перед елементом поставити функцію del. Нуля у нашому списку уже не буде
del l[0]

# Подивитися величину списку
print(len(l))

# Добавити елемент в кінець списку
l.append(12)

# Добавити елемент в конкретний індекс. Перше ми вказуємо, в який індекс, а друге - що ми вставляємо. Тепер, на
# місці 4 буде 200
l.insert(3, 200)

# Забрати останній елемент, цей метод його і вертає
pop = l.pop()
print(pop)

# Якщо ми хочемо видалити певний елемент, ми його вказуємо в метод. Наприклад, хочемо видалити перший елемент (1)
# 1 записалася в змінну pop1 і вернулася нам
pop1 = l.pop(0)
print(pop1)

# Копіювання
copy = l.copy()
print(copy)

# Видалення по-значенню. Зараз у нас 2-ка пропаде
l.remove(2)
print(l)

# Буде помилка, якщо попробуємо видалити того, чого у нас нема
l.remove(22)

# Ми можемо розширяти один список іншим. Вивід буде [1, 2, 3, 4, 5, 6]
list1 = [1, 2, 3]
list2 = [4, 5, 6]
list1.extend(list2)
print(list1)

# Ми можемо шукати індекс окремого елемента. Знайдемо індекс 5. Шукає вона зліва направо.
# Вивід буде 4, тому що під 4 індексом, у нас є 5-ка
list_one = [1, 2, 3, 4, 5, 6]
print(list_one.index(5))

# Можемо вказаувати діапазон. Шукаємо між 0 і 3, то буде помилка. Тому що між 0 і третім елементом 5 нема
print(list_one.index(5, 0,3))

# Тут буде все добре, тому що між 0 і сьомим елементом, 5 існує
print(list_one.index(5, 0,7))

# Сортування списку
# Так само воно діє по-алфавітному порядку
sort_list = [25, 60, 6, 6, 63, 52]

# По спаданню
sort_list.sort(reverse=True)
print(sort_list)

# По зростанню
sort_list.sort(reverse=False)
print(sort_list)

# Ми можемо порахувати кількість елементів, яке у нас є. Наприклад, тут нам вернеться 1, тому що у нас 25 є одна в списку
print(sort_list.count(25))

# Очистити повністю список
print(sort_list.clear())

# Покаже список задом наперед
print(sort_list.reverse())

# Зрізи: ми можемо вирізати кусок списку і створювати з нього новий
# Наприклад, ми маємо масив new_list. З нього ми вибираємо елементи з першого по 5-тий.
# І записуємо в новий масив modern_list.
# Ще приклад, ми беремо елементи з 2 по 6 і записуємо в новий список list_modern

new_list = [3, 5, 11, 25, 64, 75, 73, 79, 92, 99]
modern_list = new_list[0:5]
list_modern = new_list[2:6]

# Можемо вказувати крок, з якого хочемо забирати: наприкдад, хочемо забрати з 1 по 6 елемент, але кожен другий
# Третім параметром вказуємо крок
step_list = new_list[1:6:2]

# Хочемо забрати кожен другий елемент. Вивід буде [3, 11, 64, 73, 92]
new_step_list = new_list[::2]

# У зворотньому порядку
new_step_list_minus = new_list[::-2]


# Boolean вирази

one_number = 5
two_number = 3

print(one_number < two_number)
print(one_number <= two_number)
print(one_number >= two_number)
print(one_number > two_number)
print(one_number == two_number)
print(one_number != two_number)

s1 = 'Hi '
s2 = 'Hi'

print(s1 == s2)
print(s1 is s2)
print(s1 is not s2)

# == зрівнює значення,
# is зрівнює адрес пам`яті, зсилається чи об`єкт один на одного.
# Оператор is оцінює значення true, якщо змінні з обох сторін оператора вказують на той самий об`єкт і false в іншому випадку.

# Оператор логічний if. В python круглих і фігурних дужок не треба. Тут все робится на tab. Зразу після 2-х крапок,
# IDE нас перемістило на 1 tab. Все, що буде на цього рівня taba, буде називатись блоком.

if 5 < 6:
    print('It is true')
    print(True)
else:
    print(False)

# Якщо у нас ще одна умова, ми можемо використати elif

if 5 < 6:
    print('That is true')
elif 5 < 7:
    print(True)

# Замість тернарного орератора, у нас є лінійний if

num = int(input('Enter a number: '))
res = 'yes' if num > 5 else 'no'
print(res)

# Оператор in
# Перевіряє чи є 5 в якомусь перечисляємому об`єкті. Вертає true або false
print(5 in [1, 2, 3, 4, 5])

# Тип даних tuple. Це так само, як і list, але незмінний

tuple_1 = 1, 2, 3
# або
tuple_2 = (1,2,3)

# Це одинаково. Так само ми можемо діставати елементи

print(tuple_1[1])
print(tuple_2[2])

# З кінця

print(tuple_1[-1])
print(tuple_2[-2])

# tuple потрібні в тому плані, що ми в цей tuple не можемо добавляти, видаляти. Тому що будуть помилки.
# Кортеж незмінних структур даних. Незмінний список

# Словник
# Це так само, як і об`єкт в js, однак ключі завернуті в лапки

d = dict(name='Vasia', age = 15)
print(d)

# вивід буде: {'name': 'Vasia', 'age': 15}

# Другий спосіб

d2 = {'name': 'Dmytrii', 'age': 22}
print(d2)

# Є певні обмеження. Ми не можем ключем dict робити dict. Ми не можем ключем dict робити list (тобто список не може бути ключем)
# Може бути цифрою, функцією, екзимпляром класа. Тільки другий словник не може бути ключем іншого словника і список не може бути
# ключем словника.

# Щоб доступитися до окремого поля, нам просто треба звернутися до словника, відкрити квадратні дужки і прописати поле необхідне

d3 = {'name': 'Bob', 'age': 45, 'status': False}
print(d3['name'])

# Нам вальнеться помилка, якщо ми звернемося до поля, якого не існує

d3['gender']

# Інший спосіб доступитися до поля

name = d3.get('name')
#
# якщо написати так
#
name\
    = d3.get('name')

# Це можна скоротити довгий рядок за допомогою \. Це вважатиметься як 1 рядок
# Якщо нам не знаходить такого поля, нам виведеться none

# Якщо ми пропишемо

name = d3.get('name1', 50)
print(name)

# То нам вернеться 50, якщо не знайшлось такого поля. А якщо знайдеться, то верни те значення

# Очистити словник
d3.clear()

# Так само можна скопіювати. Словник також вважається ссилочним типом данних.
# Воно так само робить однорівневу копію словника
d3.copy()

# Коли нам треба створити словник, з ключами, але без значень. Або зразу установлене певне значення.
# Ми можемо передати сюди список і через кому сказати, які ключі тут будуть

dict_new_fromkeys = dict.fromkeys(['name', 'age', 'salary'])
print(dict_new_fromkeys)

# Вивід буде {'name': None, 'age': None, 'salary': None}

# Якщо прописати

dict_new_fromkeys_2 = dict.fromkeys(['name', 'age', 'salary'], 22)

# Для кожного поля, значення буде 22

# Витягнути всі ключі
print(d3.keys())

# Цей метод повертає об`єкт, що ітерується.
# Такий об`єкт містить пари ключ-значення для словника за аналогією з кортежами у списку.
# Метод використовується, коли необхідно перебрати значення словника. Ви можете використовувати об`єкт,
# який повертає items(),
# щоб показати зміни у словнику.

print(d3.items())

# Вивід буде dict_items([('name', 'Bob'), ('age', 45), ('status', False)])

# Щоб з`явився нам простий список, ми просто дописуємо функцію list

print(list(d3.items()))

# Видалити по-ключу

name = d3.pop('name')
print(d3)
print(name)


# Метод popitem повертає довільну пару (ключ, значення), видаляючи її зі словника.

pi = d3.popitem()
print(d3)
print(pi)

# Метод setdefault буде повертати значення ключа, але якщо його не буде, то помилки не буде, а буде
# створювати ключ із певним значенням

d3.setdefault('job', 'angular developer')
print(d3)

# нам добавилось поле job із значенням angular developer. Якщо воно знайде той ключ існуючий, то значення не мінятимуться

# Отримати список значень

print(d3.values())

# Цикли

integer = [1, 2, 3, 4, 5, 6, 7]

for a in integer:
    print(a)

# Виведеться кожен елемент словника

# Щоб проітерувати до певного елемента використовуємо range. Це як генератор, в якому можна вказувати діапазони певні.

for b in range(25):
    print(b)

# Виведеться цикл від 1 до 25

for c in range(5, 19):
    print(c)

# Виведеться від 5 до 18

for d in range(5, 11, 2):
    print(d)

# Виведеться з 5 до 18 з кроком 2

# Ми можемо в цикл передати довжину нашого списку і по-кожному елементу вивести

for e in range(len(integer)):
    print(integer[e])

# Ми можемо ітерувати і наші словники
# Вказуємо 2 змінні (k - key, v - value, можна міняти назви, але просто так прийнято називати),
# звертаємося до нашого словника. Звертаємося до метода items, який вертав нам кортеж ключ - значення, тому
# ми їх і спокійно виводимо

dict_loop = {'name': 'Dmytrii', 'age': 21, 'status': False}

for k,v in dict_loop.items():
    print(k, v)

# While цикл

while_number = 5

while while_number > 0:
    print(while_number)
    while_number -= 1

# Вивід буде: 5, 4, 3, 2, 1

# Тут ще є else, коли умова вже невірна, коли цикл вже закінчився. Якщо цикл навіть ніразу і не відпрацював, ми
# отримаємо те, що буде в else

while_number_2 = 5

while while_number_2 > 0:
    print(while_number_2)
    while_number_2 -= 1
else:
    print('finish')